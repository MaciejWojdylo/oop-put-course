#include <iostream>
#include <string>
#include <thread>
#include <vector>
#include <mutex>
#include <atomic>

using namespace std;
mutex mtx;

void countNucleotides(const string& sequence, int start, int end, vector<atomic<int>>& counts)
{
    for (int i = start; i < end; ++i)
    {
        char nucleotide = sequence[i];
        if (nucleotide == 'A')
            counts[0]++;
        else if (nucleotide == 'C')
            counts[1]++;
        else if (nucleotide == 'G')
            counts[2]++;
        else if (nucleotide == 'T')
            counts[3]++;
    }
}

int main()
{
    string sequence = "ACGTACGTGACTAGCTAGCTAGCTGATCGATCGATCGTAGCTAGCTAGCTAGCTGATCGATCGATCGCTAGCTATCGATCGATCGT";
    const int numThreads = 4;
    int sequenceLength = sequence.length();
    int segmentLength = sequenceLength / numThreads;

    vector<atomic<int>> counts(4);
    vector<thread> threads(numThreads);

    for (int i = 0; i < numThreads; ++i)
    {
        int start = i * segmentLength;
        int end = (i == numThreads - 1) ? sequenceLength : start + segmentLength;
        threads[i] = thread(countNucleotides,ref(sequence), start, end,ref(counts));
    }

    for (auto& thread : threads)
    {
        thread.join();
    }
    cout<<"Your Sequence : " << sequence << endl;
    cout << "Total frequency of nucleotides:" << endl;
    cout << "A: " << counts[0] << endl;
    cout << "C: " << counts[1] << endl;
    cout << "G: " << counts[2] << endl;
    cout << "T: " << counts[3] << endl;
    return 0;
}
